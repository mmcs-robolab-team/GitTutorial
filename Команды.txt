Это короткая сводка самого необходимого. За подробностями, предысторией и философией Гита добро пожаловать на Хабр

Git - система контроля версий, специализирующаяся на хранении дельт - изменений в файлах. 
Commit (коммит) - создание контрольной точки с записью списка изменений относительно предыдущей контрольной точки (либо начала времен)

git clone https://github.com/mmcs-robolab-team/<имя-репозитория> - клонирование репозитория по прямой ссылке

git pull - приведение локального репозитория в соответствии с удаленным (рекомендуется делать перед каждым сеансом работы)

git add <file> - индексация изимений в файле
git add . - индексация всех изменений файлов текущего каталога

git commit -m "<Сообщение, подробно поясняющее изменения>" - коммит всех проиндексированных изменений
git commit -a -m "<Сообщение, подробно поясняющее изменения>" - коммит всех изменений, независимо от индексации (файлы, созданные после последнего коммита, не будут включены в коммит, исользуйте git add!!!)
git commit --amend - добавление изменений в последний коммит вместо создания нового (только в случае необходимости!)

git push origin HEAD - отправка всех коммитов текущей ветки на удаленный репозиторий (возможно, потребуется пароль удаленного репозитория или настроенный доступ по SSH)

git status - текущий статус репозитория (есть ли не проиндексированные и не закоммиченные изменения)
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short - показ дерева коммитов в удобном виде средствами ASCII-графики  (например для выяснения commit-num)
git config --global alias.history log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short - введение синонима history для длиннющей команды из предыдущей строки

git checkout <file> - откат непроиндексированных изменений файла (необратимо!!!)

git reset <file> - сброс индексации файла (сам файл не изменяется!!!)
git reset --hard <commit-num> - откат всех фалов до состония указанного коммита (почти необратимо)
git reset --hard HEAD - откат всех файлов к последнему коммиту

git stash - откат изменений, с помещение на стек черновиков (с возможностью последующего восстановления)
git stash apply - вернуть изменения из черновика
git stash drop - удалить из стека

git checkout - перемещение указателя HEAD. Перед применением лучше закоммитить все изменения, либо выгрузить в черновик (git stash)
git checkout -b <branch> - создать новую ветку от текущего коммиита (HEAD) и переместить HEAD на нее
git checkout <branch> - переместить HEAD на последний коммит ветки (всякое перемещение HEAD приводит файлы в сответствии коммиту, на который теперь указывает HEAD)
git checkout <commit-num> - переместить HEAD на указанный коммит

git tag <tag-name> - присвоение текущему положению HEAD имени для простоты обращения. Можно использовать для пометок этапов разработки.